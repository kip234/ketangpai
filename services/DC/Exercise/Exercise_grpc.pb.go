// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Exercise

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExerciseClient is the client API for Exercise service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExerciseClient interface {
	GetExercise(ctx context.Context, in *I, opts ...grpc.CallOption) (*ExerciseData, error)
	GetExercisec(ctx context.Context, in *I, opts ...grpc.CallOption) (*ExerciseData, error)
	GetExercises(ctx context.Context, in *I, opts ...grpc.CallOption) (Exercise_GetExercisesClient, error)
	AddExercise(ctx context.Context, in *ExerciseData, opts ...grpc.CallOption) (*ExerciseData, error)
	SubmitAns(ctx context.Context, in *Submit, opts ...grpc.CallOption) (*I, error)
	GetKey(ctx context.Context, in *I, opts ...grpc.CallOption) (*Submit, error)
	SetScore(ctx context.Context, in *Score, opts ...grpc.CallOption) (*Empty1, error)
	GetScore(ctx context.Context, in *I, opts ...grpc.CallOption) (*Score, error)
	GetScores(ctx context.Context, in *I, opts ...grpc.CallOption) (Exercise_GetScoresClient, error)
	GetClassScores(ctx context.Context, in *I, opts ...grpc.CallOption) (Exercise_GetClassScoresClient, error)
	GetClassSubmit(ctx context.Context, in *I, opts ...grpc.CallOption) (Exercise_GetClassSubmitClient, error)
	DelExercise(ctx context.Context, in *I, opts ...grpc.CallOption) (*Empty1, error)
	DelExercises(ctx context.Context, in *I, opts ...grpc.CallOption) (*Empty1, error)
}

type exerciseClient struct {
	cc grpc.ClientConnInterface
}

func NewExerciseClient(cc grpc.ClientConnInterface) ExerciseClient {
	return &exerciseClient{cc}
}

func (c *exerciseClient) GetExercise(ctx context.Context, in *I, opts ...grpc.CallOption) (*ExerciseData, error) {
	out := new(ExerciseData)
	err := c.cc.Invoke(ctx, "/exercise.exercise/get_exercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseClient) GetExercisec(ctx context.Context, in *I, opts ...grpc.CallOption) (*ExerciseData, error) {
	out := new(ExerciseData)
	err := c.cc.Invoke(ctx, "/exercise.exercise/get_exercisec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseClient) GetExercises(ctx context.Context, in *I, opts ...grpc.CallOption) (Exercise_GetExercisesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Exercise_ServiceDesc.Streams[0], "/exercise.exercise/get_exercises", opts...)
	if err != nil {
		return nil, err
	}
	x := &exerciseGetExercisesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exercise_GetExercisesClient interface {
	Recv() (*ExerciseData, error)
	grpc.ClientStream
}

type exerciseGetExercisesClient struct {
	grpc.ClientStream
}

func (x *exerciseGetExercisesClient) Recv() (*ExerciseData, error) {
	m := new(ExerciseData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exerciseClient) AddExercise(ctx context.Context, in *ExerciseData, opts ...grpc.CallOption) (*ExerciseData, error) {
	out := new(ExerciseData)
	err := c.cc.Invoke(ctx, "/exercise.exercise/add_exercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseClient) SubmitAns(ctx context.Context, in *Submit, opts ...grpc.CallOption) (*I, error) {
	out := new(I)
	err := c.cc.Invoke(ctx, "/exercise.exercise/submit_ans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseClient) GetKey(ctx context.Context, in *I, opts ...grpc.CallOption) (*Submit, error) {
	out := new(Submit)
	err := c.cc.Invoke(ctx, "/exercise.exercise/get_key", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseClient) SetScore(ctx context.Context, in *Score, opts ...grpc.CallOption) (*Empty1, error) {
	out := new(Empty1)
	err := c.cc.Invoke(ctx, "/exercise.exercise/set_score", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseClient) GetScore(ctx context.Context, in *I, opts ...grpc.CallOption) (*Score, error) {
	out := new(Score)
	err := c.cc.Invoke(ctx, "/exercise.exercise/get_score", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseClient) GetScores(ctx context.Context, in *I, opts ...grpc.CallOption) (Exercise_GetScoresClient, error) {
	stream, err := c.cc.NewStream(ctx, &Exercise_ServiceDesc.Streams[1], "/exercise.exercise/get_scores", opts...)
	if err != nil {
		return nil, err
	}
	x := &exerciseGetScoresClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exercise_GetScoresClient interface {
	Recv() (*Submit, error)
	grpc.ClientStream
}

type exerciseGetScoresClient struct {
	grpc.ClientStream
}

func (x *exerciseGetScoresClient) Recv() (*Submit, error) {
	m := new(Submit)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exerciseClient) GetClassScores(ctx context.Context, in *I, opts ...grpc.CallOption) (Exercise_GetClassScoresClient, error) {
	stream, err := c.cc.NewStream(ctx, &Exercise_ServiceDesc.Streams[2], "/exercise.exercise/get_class_scores", opts...)
	if err != nil {
		return nil, err
	}
	x := &exerciseGetClassScoresClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exercise_GetClassScoresClient interface {
	Recv() (*Score, error)
	grpc.ClientStream
}

type exerciseGetClassScoresClient struct {
	grpc.ClientStream
}

func (x *exerciseGetClassScoresClient) Recv() (*Score, error) {
	m := new(Score)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exerciseClient) GetClassSubmit(ctx context.Context, in *I, opts ...grpc.CallOption) (Exercise_GetClassSubmitClient, error) {
	stream, err := c.cc.NewStream(ctx, &Exercise_ServiceDesc.Streams[3], "/exercise.exercise/get_class_submit", opts...)
	if err != nil {
		return nil, err
	}
	x := &exerciseGetClassSubmitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exercise_GetClassSubmitClient interface {
	Recv() (*Submit, error)
	grpc.ClientStream
}

type exerciseGetClassSubmitClient struct {
	grpc.ClientStream
}

func (x *exerciseGetClassSubmitClient) Recv() (*Submit, error) {
	m := new(Submit)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exerciseClient) DelExercise(ctx context.Context, in *I, opts ...grpc.CallOption) (*Empty1, error) {
	out := new(Empty1)
	err := c.cc.Invoke(ctx, "/exercise.exercise/del_exercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseClient) DelExercises(ctx context.Context, in *I, opts ...grpc.CallOption) (*Empty1, error) {
	out := new(Empty1)
	err := c.cc.Invoke(ctx, "/exercise.exercise/del_exercises", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExerciseServer is the server API for Exercise service.
// All implementations must embed UnimplementedExerciseServer
// for forward compatibility
type ExerciseServer interface {
	GetExercise(context.Context, *I) (*ExerciseData, error)
	GetExercisec(context.Context, *I) (*ExerciseData, error)
	GetExercises(*I, Exercise_GetExercisesServer) error
	AddExercise(context.Context, *ExerciseData) (*ExerciseData, error)
	SubmitAns(context.Context, *Submit) (*I, error)
	GetKey(context.Context, *I) (*Submit, error)
	SetScore(context.Context, *Score) (*Empty1, error)
	GetScore(context.Context, *I) (*Score, error)
	GetScores(*I, Exercise_GetScoresServer) error
	GetClassScores(*I, Exercise_GetClassScoresServer) error
	GetClassSubmit(*I, Exercise_GetClassSubmitServer) error
	DelExercise(context.Context, *I) (*Empty1, error)
	DelExercises(context.Context, *I) (*Empty1, error)
	mustEmbedUnimplementedExerciseServer()
}

// UnimplementedExerciseServer must be embedded to have forward compatible implementations.
type UnimplementedExerciseServer struct {
}

func (UnimplementedExerciseServer) GetExercise(context.Context, *I) (*ExerciseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExercise not implemented")
}
func (UnimplementedExerciseServer) GetExercisec(context.Context, *I) (*ExerciseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExercisec not implemented")
}
func (UnimplementedExerciseServer) GetExercises(*I, Exercise_GetExercisesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetExercises not implemented")
}
func (UnimplementedExerciseServer) AddExercise(context.Context, *ExerciseData) (*ExerciseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExercise not implemented")
}
func (UnimplementedExerciseServer) SubmitAns(context.Context, *Submit) (*I, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAns not implemented")
}
func (UnimplementedExerciseServer) GetKey(context.Context, *I) (*Submit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedExerciseServer) SetScore(context.Context, *Score) (*Empty1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScore not implemented")
}
func (UnimplementedExerciseServer) GetScore(context.Context, *I) (*Score, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScore not implemented")
}
func (UnimplementedExerciseServer) GetScores(*I, Exercise_GetScoresServer) error {
	return status.Errorf(codes.Unimplemented, "method GetScores not implemented")
}
func (UnimplementedExerciseServer) GetClassScores(*I, Exercise_GetClassScoresServer) error {
	return status.Errorf(codes.Unimplemented, "method GetClassScores not implemented")
}
func (UnimplementedExerciseServer) GetClassSubmit(*I, Exercise_GetClassSubmitServer) error {
	return status.Errorf(codes.Unimplemented, "method GetClassSubmit not implemented")
}
func (UnimplementedExerciseServer) DelExercise(context.Context, *I) (*Empty1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelExercise not implemented")
}
func (UnimplementedExerciseServer) DelExercises(context.Context, *I) (*Empty1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelExercises not implemented")
}
func (UnimplementedExerciseServer) mustEmbedUnimplementedExerciseServer() {}

// UnsafeExerciseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExerciseServer will
// result in compilation errors.
type UnsafeExerciseServer interface {
	mustEmbedUnimplementedExerciseServer()
}

func RegisterExerciseServer(s grpc.ServiceRegistrar, srv ExerciseServer) {
	s.RegisterService(&Exercise_ServiceDesc, srv)
}

func _Exercise_GetExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(I)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServer).GetExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exercise.exercise/get_exercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServer).GetExercise(ctx, req.(*I))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exercise_GetExercisec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(I)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServer).GetExercisec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exercise.exercise/get_exercisec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServer).GetExercisec(ctx, req.(*I))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exercise_GetExercises_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(I)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExerciseServer).GetExercises(m, &exerciseGetExercisesServer{stream})
}

type Exercise_GetExercisesServer interface {
	Send(*ExerciseData) error
	grpc.ServerStream
}

type exerciseGetExercisesServer struct {
	grpc.ServerStream
}

func (x *exerciseGetExercisesServer) Send(m *ExerciseData) error {
	return x.ServerStream.SendMsg(m)
}

func _Exercise_AddExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExerciseData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServer).AddExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exercise.exercise/add_exercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServer).AddExercise(ctx, req.(*ExerciseData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exercise_SubmitAns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Submit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServer).SubmitAns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exercise.exercise/submit_ans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServer).SubmitAns(ctx, req.(*Submit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exercise_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(I)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exercise.exercise/get_key",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServer).GetKey(ctx, req.(*I))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exercise_SetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Score)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServer).SetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exercise.exercise/set_score",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServer).SetScore(ctx, req.(*Score))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exercise_GetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(I)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServer).GetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exercise.exercise/get_score",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServer).GetScore(ctx, req.(*I))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exercise_GetScores_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(I)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExerciseServer).GetScores(m, &exerciseGetScoresServer{stream})
}

type Exercise_GetScoresServer interface {
	Send(*Submit) error
	grpc.ServerStream
}

type exerciseGetScoresServer struct {
	grpc.ServerStream
}

func (x *exerciseGetScoresServer) Send(m *Submit) error {
	return x.ServerStream.SendMsg(m)
}

func _Exercise_GetClassScores_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(I)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExerciseServer).GetClassScores(m, &exerciseGetClassScoresServer{stream})
}

type Exercise_GetClassScoresServer interface {
	Send(*Score) error
	grpc.ServerStream
}

type exerciseGetClassScoresServer struct {
	grpc.ServerStream
}

func (x *exerciseGetClassScoresServer) Send(m *Score) error {
	return x.ServerStream.SendMsg(m)
}

func _Exercise_GetClassSubmit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(I)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExerciseServer).GetClassSubmit(m, &exerciseGetClassSubmitServer{stream})
}

type Exercise_GetClassSubmitServer interface {
	Send(*Submit) error
	grpc.ServerStream
}

type exerciseGetClassSubmitServer struct {
	grpc.ServerStream
}

func (x *exerciseGetClassSubmitServer) Send(m *Submit) error {
	return x.ServerStream.SendMsg(m)
}

func _Exercise_DelExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(I)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServer).DelExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exercise.exercise/del_exercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServer).DelExercise(ctx, req.(*I))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exercise_DelExercises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(I)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServer).DelExercises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exercise.exercise/del_exercises",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServer).DelExercises(ctx, req.(*I))
	}
	return interceptor(ctx, in, info, handler)
}

// Exercise_ServiceDesc is the grpc.ServiceDesc for Exercise service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exercise_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exercise.exercise",
	HandlerType: (*ExerciseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_exercise",
			Handler:    _Exercise_GetExercise_Handler,
		},
		{
			MethodName: "get_exercisec",
			Handler:    _Exercise_GetExercisec_Handler,
		},
		{
			MethodName: "add_exercise",
			Handler:    _Exercise_AddExercise_Handler,
		},
		{
			MethodName: "submit_ans",
			Handler:    _Exercise_SubmitAns_Handler,
		},
		{
			MethodName: "get_key",
			Handler:    _Exercise_GetKey_Handler,
		},
		{
			MethodName: "set_score",
			Handler:    _Exercise_SetScore_Handler,
		},
		{
			MethodName: "get_score",
			Handler:    _Exercise_GetScore_Handler,
		},
		{
			MethodName: "del_exercise",
			Handler:    _Exercise_DelExercise_Handler,
		},
		{
			MethodName: "del_exercises",
			Handler:    _Exercise_DelExercises_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "get_exercises",
			Handler:       _Exercise_GetExercises_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "get_scores",
			Handler:       _Exercise_GetScores_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "get_class_scores",
			Handler:       _Exercise_GetClassScores_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "get_class_submit",
			Handler:       _Exercise_GetClassSubmit_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Exercise.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package JWT

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JWTClient is the client API for JWT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JWTClient interface {
	RefreshToken(ctx context.Context, in *Juser, opts ...grpc.CallOption) (*Token, error)
	CheckToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Juser, error)
	DelJwt(ctx context.Context, in *Juser, opts ...grpc.CallOption) (*Token, error)
}

type jWTClient struct {
	cc grpc.ClientConnInterface
}

func NewJWTClient(cc grpc.ClientConnInterface) JWTClient {
	return &jWTClient{cc}
}

func (c *jWTClient) RefreshToken(ctx context.Context, in *Juser, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/JWT/refresh_token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTClient) CheckToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Juser, error) {
	out := new(Juser)
	err := c.cc.Invoke(ctx, "/JWT/check_token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTClient) DelJwt(ctx context.Context, in *Juser, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/JWT/del_jwt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JWTServer is the server API for JWT service.
// All implementations must embed UnimplementedJWTServer
// for forward compatibility
type JWTServer interface {
	RefreshToken(context.Context, *Juser) (*Token, error)
	CheckToken(context.Context, *Token) (*Juser, error)
	DelJwt(context.Context, *Juser) (*Token, error)
	mustEmbedUnimplementedJWTServer()
}

// UnimplementedJWTServer must be embedded to have forward compatible implementations.
type UnimplementedJWTServer struct {
}

func (UnimplementedJWTServer) RefreshToken(context.Context, *Juser) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedJWTServer) CheckToken(context.Context, *Token) (*Juser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedJWTServer) DelJwt(context.Context, *Juser) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelJwt not implemented")
}
func (UnimplementedJWTServer) mustEmbedUnimplementedJWTServer() {}

// UnsafeJWTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JWTServer will
// result in compilation errors.
type UnsafeJWTServer interface {
	mustEmbedUnimplementedJWTServer()
}

func RegisterJWTServer(s grpc.ServiceRegistrar, srv JWTServer) {
	s.RegisterService(&JWT_ServiceDesc, srv)
}

func _JWT_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Juser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JWT/refresh_token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTServer).RefreshToken(ctx, req.(*Juser))
	}
	return interceptor(ctx, in, info, handler)
}

func _JWT_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JWT/check_token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTServer).CheckToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _JWT_DelJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Juser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTServer).DelJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JWT/del_jwt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTServer).DelJwt(ctx, req.(*Juser))
	}
	return interceptor(ctx, in, info, handler)
}

// JWT_ServiceDesc is the grpc.ServiceDesc for JWT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JWT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "JWT",
	HandlerType: (*JWTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "refresh_token",
			Handler:    _JWT_RefreshToken_Handler,
		},
		{
			MethodName: "check_token",
			Handler:    _JWT_CheckToken_Handler,
		},
		{
			MethodName: "del_jwt",
			Handler:    _JWT_DelJwt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "JWT.proto",
}

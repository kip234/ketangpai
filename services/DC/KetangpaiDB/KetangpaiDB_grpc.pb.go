// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package KetangpaiDB

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KetangpaiDBClient is the client API for KetangpaiDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KetangpaiDBClient interface {
	CreateUser(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*Uid, error)
	SetType(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error)
	GetUserClass(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*Classid, error)
	GetUserType(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*Typecode, error)
	CreateClass(ctx context.Context, in *Class, opts ...grpc.CallOption) (*Class, error)
	GetClassInfo(ctx context.Context, in *Classid, opts ...grpc.CallOption) (*Class, error)
	GetClassTeacher(ctx context.Context, in *Classid, opts ...grpc.CallOption) (*Uid, error)
	GetClassName(ctx context.Context, in *Classid, opts ...grpc.CallOption) (*Classname, error)
	DissolveClass(ctx context.Context, in *Classid, opts ...grpc.CallOption) (*Empty, error)
	RefreshingClassData(ctx context.Context, in *Class, opts ...grpc.CallOption) (*Class, error)
	FireStudent(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*Class, error)
	AddStudent(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Class, error)
}

type ketangpaiDBClient struct {
	cc grpc.ClientConnInterface
}

func NewKetangpaiDBClient(cc grpc.ClientConnInterface) KetangpaiDBClient {
	return &ketangpaiDBClient{cc}
}

func (c *ketangpaiDBClient) CreateUser(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*Uid, error) {
	out := new(Uid)
	err := c.cc.Invoke(ctx, "/ketangpaiDB.ketangpaiDB/create_user", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ketangpaiDBClient) SetType(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/ketangpaiDB.ketangpaiDB/set_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ketangpaiDBClient) GetUserClass(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*Classid, error) {
	out := new(Classid)
	err := c.cc.Invoke(ctx, "/ketangpaiDB.ketangpaiDB/get_user_class", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ketangpaiDBClient) GetUserType(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*Typecode, error) {
	out := new(Typecode)
	err := c.cc.Invoke(ctx, "/ketangpaiDB.ketangpaiDB/get_user_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ketangpaiDBClient) CreateClass(ctx context.Context, in *Class, opts ...grpc.CallOption) (*Class, error) {
	out := new(Class)
	err := c.cc.Invoke(ctx, "/ketangpaiDB.ketangpaiDB/create_class", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ketangpaiDBClient) GetClassInfo(ctx context.Context, in *Classid, opts ...grpc.CallOption) (*Class, error) {
	out := new(Class)
	err := c.cc.Invoke(ctx, "/ketangpaiDB.ketangpaiDB/get_class_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ketangpaiDBClient) GetClassTeacher(ctx context.Context, in *Classid, opts ...grpc.CallOption) (*Uid, error) {
	out := new(Uid)
	err := c.cc.Invoke(ctx, "/ketangpaiDB.ketangpaiDB/get_class_teacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ketangpaiDBClient) GetClassName(ctx context.Context, in *Classid, opts ...grpc.CallOption) (*Classname, error) {
	out := new(Classname)
	err := c.cc.Invoke(ctx, "/ketangpaiDB.ketangpaiDB/get_class_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ketangpaiDBClient) DissolveClass(ctx context.Context, in *Classid, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ketangpaiDB.ketangpaiDB/dissolve_class", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ketangpaiDBClient) RefreshingClassData(ctx context.Context, in *Class, opts ...grpc.CallOption) (*Class, error) {
	out := new(Class)
	err := c.cc.Invoke(ctx, "/ketangpaiDB.ketangpaiDB/refreshing_class_data", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ketangpaiDBClient) FireStudent(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*Class, error) {
	out := new(Class)
	err := c.cc.Invoke(ctx, "/ketangpaiDB.ketangpaiDB/fire_student", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ketangpaiDBClient) AddStudent(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Class, error) {
	out := new(Class)
	err := c.cc.Invoke(ctx, "/ketangpaiDB.ketangpaiDB/add_student", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KetangpaiDBServer is the server API for KetangpaiDB service.
// All implementations must embed UnimplementedKetangpaiDBServer
// for forward compatibility
type KetangpaiDBServer interface {
	CreateUser(context.Context, *Uid) (*Uid, error)
	SetType(context.Context, *Member) (*Member, error)
	GetUserClass(context.Context, *Uid) (*Classid, error)
	GetUserType(context.Context, *Uid) (*Typecode, error)
	CreateClass(context.Context, *Class) (*Class, error)
	GetClassInfo(context.Context, *Classid) (*Class, error)
	GetClassTeacher(context.Context, *Classid) (*Uid, error)
	GetClassName(context.Context, *Classid) (*Classname, error)
	DissolveClass(context.Context, *Classid) (*Empty, error)
	RefreshingClassData(context.Context, *Class) (*Class, error)
	FireStudent(context.Context, *Uid) (*Class, error)
	AddStudent(context.Context, *Member) (*Class, error)
	mustEmbedUnimplementedKetangpaiDBServer()
}

// UnimplementedKetangpaiDBServer must be embedded to have forward compatible implementations.
type UnimplementedKetangpaiDBServer struct {
}

func (UnimplementedKetangpaiDBServer) CreateUser(context.Context, *Uid) (*Uid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedKetangpaiDBServer) SetType(context.Context, *Member) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetType not implemented")
}
func (UnimplementedKetangpaiDBServer) GetUserClass(context.Context, *Uid) (*Classid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserClass not implemented")
}
func (UnimplementedKetangpaiDBServer) GetUserType(context.Context, *Uid) (*Typecode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserType not implemented")
}
func (UnimplementedKetangpaiDBServer) CreateClass(context.Context, *Class) (*Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClass not implemented")
}
func (UnimplementedKetangpaiDBServer) GetClassInfo(context.Context, *Classid) (*Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassInfo not implemented")
}
func (UnimplementedKetangpaiDBServer) GetClassTeacher(context.Context, *Classid) (*Uid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassTeacher not implemented")
}
func (UnimplementedKetangpaiDBServer) GetClassName(context.Context, *Classid) (*Classname, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassName not implemented")
}
func (UnimplementedKetangpaiDBServer) DissolveClass(context.Context, *Classid) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DissolveClass not implemented")
}
func (UnimplementedKetangpaiDBServer) RefreshingClassData(context.Context, *Class) (*Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshingClassData not implemented")
}
func (UnimplementedKetangpaiDBServer) FireStudent(context.Context, *Uid) (*Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FireStudent not implemented")
}
func (UnimplementedKetangpaiDBServer) AddStudent(context.Context, *Member) (*Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudent not implemented")
}
func (UnimplementedKetangpaiDBServer) mustEmbedUnimplementedKetangpaiDBServer() {}

// UnsafeKetangpaiDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KetangpaiDBServer will
// result in compilation errors.
type UnsafeKetangpaiDBServer interface {
	mustEmbedUnimplementedKetangpaiDBServer()
}

func RegisterKetangpaiDBServer(s grpc.ServiceRegistrar, srv KetangpaiDBServer) {
	s.RegisterService(&KetangpaiDB_ServiceDesc, srv)
}

func _KetangpaiDB_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KetangpaiDBServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ketangpaiDB.ketangpaiDB/create_user",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KetangpaiDBServer).CreateUser(ctx, req.(*Uid))
	}
	return interceptor(ctx, in, info, handler)
}

func _KetangpaiDB_SetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KetangpaiDBServer).SetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ketangpaiDB.ketangpaiDB/set_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KetangpaiDBServer).SetType(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _KetangpaiDB_GetUserClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KetangpaiDBServer).GetUserClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ketangpaiDB.ketangpaiDB/get_user_class",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KetangpaiDBServer).GetUserClass(ctx, req.(*Uid))
	}
	return interceptor(ctx, in, info, handler)
}

func _KetangpaiDB_GetUserType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KetangpaiDBServer).GetUserType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ketangpaiDB.ketangpaiDB/get_user_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KetangpaiDBServer).GetUserType(ctx, req.(*Uid))
	}
	return interceptor(ctx, in, info, handler)
}

func _KetangpaiDB_CreateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Class)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KetangpaiDBServer).CreateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ketangpaiDB.ketangpaiDB/create_class",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KetangpaiDBServer).CreateClass(ctx, req.(*Class))
	}
	return interceptor(ctx, in, info, handler)
}

func _KetangpaiDB_GetClassInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Classid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KetangpaiDBServer).GetClassInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ketangpaiDB.ketangpaiDB/get_class_info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KetangpaiDBServer).GetClassInfo(ctx, req.(*Classid))
	}
	return interceptor(ctx, in, info, handler)
}

func _KetangpaiDB_GetClassTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Classid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KetangpaiDBServer).GetClassTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ketangpaiDB.ketangpaiDB/get_class_teacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KetangpaiDBServer).GetClassTeacher(ctx, req.(*Classid))
	}
	return interceptor(ctx, in, info, handler)
}

func _KetangpaiDB_GetClassName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Classid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KetangpaiDBServer).GetClassName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ketangpaiDB.ketangpaiDB/get_class_name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KetangpaiDBServer).GetClassName(ctx, req.(*Classid))
	}
	return interceptor(ctx, in, info, handler)
}

func _KetangpaiDB_DissolveClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Classid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KetangpaiDBServer).DissolveClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ketangpaiDB.ketangpaiDB/dissolve_class",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KetangpaiDBServer).DissolveClass(ctx, req.(*Classid))
	}
	return interceptor(ctx, in, info, handler)
}

func _KetangpaiDB_RefreshingClassData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Class)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KetangpaiDBServer).RefreshingClassData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ketangpaiDB.ketangpaiDB/refreshing_class_data",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KetangpaiDBServer).RefreshingClassData(ctx, req.(*Class))
	}
	return interceptor(ctx, in, info, handler)
}

func _KetangpaiDB_FireStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KetangpaiDBServer).FireStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ketangpaiDB.ketangpaiDB/fire_student",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KetangpaiDBServer).FireStudent(ctx, req.(*Uid))
	}
	return interceptor(ctx, in, info, handler)
}

func _KetangpaiDB_AddStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KetangpaiDBServer).AddStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ketangpaiDB.ketangpaiDB/add_student",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KetangpaiDBServer).AddStudent(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

// KetangpaiDB_ServiceDesc is the grpc.ServiceDesc for KetangpaiDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KetangpaiDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ketangpaiDB.ketangpaiDB",
	HandlerType: (*KetangpaiDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create_user",
			Handler:    _KetangpaiDB_CreateUser_Handler,
		},
		{
			MethodName: "set_type",
			Handler:    _KetangpaiDB_SetType_Handler,
		},
		{
			MethodName: "get_user_class",
			Handler:    _KetangpaiDB_GetUserClass_Handler,
		},
		{
			MethodName: "get_user_type",
			Handler:    _KetangpaiDB_GetUserType_Handler,
		},
		{
			MethodName: "create_class",
			Handler:    _KetangpaiDB_CreateClass_Handler,
		},
		{
			MethodName: "get_class_info",
			Handler:    _KetangpaiDB_GetClassInfo_Handler,
		},
		{
			MethodName: "get_class_teacher",
			Handler:    _KetangpaiDB_GetClassTeacher_Handler,
		},
		{
			MethodName: "get_class_name",
			Handler:    _KetangpaiDB_GetClassName_Handler,
		},
		{
			MethodName: "dissolve_class",
			Handler:    _KetangpaiDB_DissolveClass_Handler,
		},
		{
			MethodName: "refreshing_class_data",
			Handler:    _KetangpaiDB_RefreshingClassData_Handler,
		},
		{
			MethodName: "fire_student",
			Handler:    _KetangpaiDB_FireStudent_Handler,
		},
		{
			MethodName: "add_student",
			Handler:    _KetangpaiDB_AddStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "KetangpaiDB.proto",
}

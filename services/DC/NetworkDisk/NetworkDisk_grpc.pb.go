// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package NetworkDisk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkDiskClient is the client API for NetworkDisk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkDiskClient interface {
	Download(ctx context.Context, in *Fileid, opts ...grpc.CallOption) (NetworkDisk_DownloadClient, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (NetworkDisk_UploadClient, error)
	GetContents(ctx context.Context, in *Classid, opts ...grpc.CallOption) (*Contents, error)
}

type networkDiskClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkDiskClient(cc grpc.ClientConnInterface) NetworkDiskClient {
	return &networkDiskClient{cc}
}

func (c *networkDiskClient) Download(ctx context.Context, in *Fileid, opts ...grpc.CallOption) (NetworkDisk_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetworkDisk_ServiceDesc.Streams[0], "/NetworkDisk.NetworkDisk/download", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkDiskDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkDisk_DownloadClient interface {
	Recv() (*Filestream, error)
	grpc.ClientStream
}

type networkDiskDownloadClient struct {
	grpc.ClientStream
}

func (x *networkDiskDownloadClient) Recv() (*Filestream, error) {
	m := new(Filestream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkDiskClient) Upload(ctx context.Context, opts ...grpc.CallOption) (NetworkDisk_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetworkDisk_ServiceDesc.Streams[1], "/NetworkDisk.NetworkDisk/upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkDiskUploadClient{stream}
	return x, nil
}

type NetworkDisk_UploadClient interface {
	Send(*Filestream) error
	CloseAndRecv() (*Fileinfo, error)
	grpc.ClientStream
}

type networkDiskUploadClient struct {
	grpc.ClientStream
}

func (x *networkDiskUploadClient) Send(m *Filestream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkDiskUploadClient) CloseAndRecv() (*Fileinfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Fileinfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkDiskClient) GetContents(ctx context.Context, in *Classid, opts ...grpc.CallOption) (*Contents, error) {
	out := new(Contents)
	err := c.cc.Invoke(ctx, "/NetworkDisk.NetworkDisk/get_contents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkDiskServer is the server API for NetworkDisk service.
// All implementations must embed UnimplementedNetworkDiskServer
// for forward compatibility
type NetworkDiskServer interface {
	Download(*Fileid, NetworkDisk_DownloadServer) error
	Upload(NetworkDisk_UploadServer) error
	GetContents(context.Context, *Classid) (*Contents, error)
	mustEmbedUnimplementedNetworkDiskServer()
}

// UnimplementedNetworkDiskServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkDiskServer struct {
}

func (UnimplementedNetworkDiskServer) Download(*Fileid, NetworkDisk_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedNetworkDiskServer) Upload(NetworkDisk_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedNetworkDiskServer) GetContents(context.Context, *Classid) (*Contents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContents not implemented")
}
func (UnimplementedNetworkDiskServer) mustEmbedUnimplementedNetworkDiskServer() {}

// UnsafeNetworkDiskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkDiskServer will
// result in compilation errors.
type UnsafeNetworkDiskServer interface {
	mustEmbedUnimplementedNetworkDiskServer()
}

func RegisterNetworkDiskServer(s grpc.ServiceRegistrar, srv NetworkDiskServer) {
	s.RegisterService(&NetworkDisk_ServiceDesc, srv)
}

func _NetworkDisk_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Fileid)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkDiskServer).Download(m, &networkDiskDownloadServer{stream})
}

type NetworkDisk_DownloadServer interface {
	Send(*Filestream) error
	grpc.ServerStream
}

type networkDiskDownloadServer struct {
	grpc.ServerStream
}

func (x *networkDiskDownloadServer) Send(m *Filestream) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkDisk_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkDiskServer).Upload(&networkDiskUploadServer{stream})
}

type NetworkDisk_UploadServer interface {
	SendAndClose(*Fileinfo) error
	Recv() (*Filestream, error)
	grpc.ServerStream
}

type networkDiskUploadServer struct {
	grpc.ServerStream
}

func (x *networkDiskUploadServer) SendAndClose(m *Fileinfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkDiskUploadServer) Recv() (*Filestream, error) {
	m := new(Filestream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NetworkDisk_GetContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Classid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkDiskServer).GetContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NetworkDisk.NetworkDisk/get_contents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkDiskServer).GetContents(ctx, req.(*Classid))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkDisk_ServiceDesc is the grpc.ServiceDesc for NetworkDisk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkDisk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NetworkDisk.NetworkDisk",
	HandlerType: (*NetworkDiskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_contents",
			Handler:    _NetworkDisk_GetContents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "download",
			Handler:       _NetworkDisk_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "upload",
			Handler:       _NetworkDisk_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "NetworkDisk.proto",
}

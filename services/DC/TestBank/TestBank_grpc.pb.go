// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package TestBank

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestBankClient is the client API for TestBank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestBankClient interface {
	Upload(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
	Download(ctx context.Context, opts ...grpc.CallOption) (TestBank_DownloadClient, error)
	GenerateTest(ctx context.Context, in *Testconf, opts ...grpc.CallOption) (TestBank_GenerateTestClient, error)
}

type testBankClient struct {
	cc grpc.ClientConnInterface
}

func NewTestBankClient(cc grpc.ClientConnInterface) TestBankClient {
	return &testBankClient{cc}
}

func (c *testBankClient) Upload(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/TestBank.TestBank/upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testBankClient) Download(ctx context.Context, opts ...grpc.CallOption) (TestBank_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestBank_ServiceDesc.Streams[0], "/TestBank.TestBank/download", opts...)
	if err != nil {
		return nil, err
	}
	x := &testBankDownloadClient{stream}
	return x, nil
}

type TestBank_DownloadClient interface {
	Send(*Testid) error
	Recv() (*Test, error)
	grpc.ClientStream
}

type testBankDownloadClient struct {
	grpc.ClientStream
}

func (x *testBankDownloadClient) Send(m *Testid) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testBankDownloadClient) Recv() (*Test, error) {
	m := new(Test)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testBankClient) GenerateTest(ctx context.Context, in *Testconf, opts ...grpc.CallOption) (TestBank_GenerateTestClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestBank_ServiceDesc.Streams[1], "/TestBank.TestBank/generate_test", opts...)
	if err != nil {
		return nil, err
	}
	x := &testBankGenerateTestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestBank_GenerateTestClient interface {
	Recv() (*Testid, error)
	grpc.ClientStream
}

type testBankGenerateTestClient struct {
	grpc.ClientStream
}

func (x *testBankGenerateTestClient) Recv() (*Testid, error) {
	m := new(Testid)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestBankServer is the server API for TestBank service.
// All implementations must embed UnimplementedTestBankServer
// for forward compatibility
type TestBankServer interface {
	Upload(context.Context, *Test) (*Test, error)
	Download(TestBank_DownloadServer) error
	GenerateTest(*Testconf, TestBank_GenerateTestServer) error
	mustEmbedUnimplementedTestBankServer()
}

// UnimplementedTestBankServer must be embedded to have forward compatible implementations.
type UnimplementedTestBankServer struct {
}

func (UnimplementedTestBankServer) Upload(context.Context, *Test) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedTestBankServer) Download(TestBank_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedTestBankServer) GenerateTest(*Testconf, TestBank_GenerateTestServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateTest not implemented")
}
func (UnimplementedTestBankServer) mustEmbedUnimplementedTestBankServer() {}

// UnsafeTestBankServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestBankServer will
// result in compilation errors.
type UnsafeTestBankServer interface {
	mustEmbedUnimplementedTestBankServer()
}

func RegisterTestBankServer(s grpc.ServiceRegistrar, srv TestBankServer) {
	s.RegisterService(&TestBank_ServiceDesc, srv)
}

func _TestBank_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestBankServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TestBank.TestBank/upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestBankServer).Upload(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestBank_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestBankServer).Download(&testBankDownloadServer{stream})
}

type TestBank_DownloadServer interface {
	Send(*Test) error
	Recv() (*Testid, error)
	grpc.ServerStream
}

type testBankDownloadServer struct {
	grpc.ServerStream
}

func (x *testBankDownloadServer) Send(m *Test) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testBankDownloadServer) Recv() (*Testid, error) {
	m := new(Testid)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestBank_GenerateTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Testconf)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestBankServer).GenerateTest(m, &testBankGenerateTestServer{stream})
}

type TestBank_GenerateTestServer interface {
	Send(*Testid) error
	grpc.ServerStream
}

type testBankGenerateTestServer struct {
	grpc.ServerStream
}

func (x *testBankGenerateTestServer) Send(m *Testid) error {
	return x.ServerStream.SendMsg(m)
}

// TestBank_ServiceDesc is the grpc.ServiceDesc for TestBank service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestBank_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TestBank.TestBank",
	HandlerType: (*TestBankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "upload",
			Handler:    _TestBank_Upload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "download",
			Handler:       _TestBank_Download_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "generate_test",
			Handler:       _TestBank_GenerateTest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "TestBank.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package RBAC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RBACClient is the client API for RBAC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RBACClient interface {
	GetRole(ctx context.Context, in *Uids, opts ...grpc.CallOption) (*Roles, error)
	GetPaths(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Paths, error)
	AddRole(ctx context.Context, in *Roles, opts ...grpc.CallOption) (*Empty, error)
	RefreshPaths(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*Empty, error)
	RefreshUserRole(ctx context.Context, in *UsersRoles, opts ...grpc.CallOption) (*Empty, error)
	CheakRolePath(ctx context.Context, in *RolesPaths, opts ...grpc.CallOption) (*Bools, error)
	Cache(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type rBACClient struct {
	cc grpc.ClientConnInterface
}

func NewRBACClient(cc grpc.ClientConnInterface) RBACClient {
	return &rBACClient{cc}
}

func (c *rBACClient) GetRole(ctx context.Context, in *Uids, opts ...grpc.CallOption) (*Roles, error) {
	out := new(Roles)
	err := c.cc.Invoke(ctx, "/RBAC.RBAC/get_role", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) GetPaths(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Paths, error) {
	out := new(Paths)
	err := c.cc.Invoke(ctx, "/RBAC.RBAC/get_paths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) AddRole(ctx context.Context, in *Roles, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/RBAC.RBAC/add_role", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) RefreshPaths(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/RBAC.RBAC/refresh_paths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) RefreshUserRole(ctx context.Context, in *UsersRoles, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/RBAC.RBAC/refresh_user_role", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) CheakRolePath(ctx context.Context, in *RolesPaths, opts ...grpc.CallOption) (*Bools, error) {
	out := new(Bools)
	err := c.cc.Invoke(ctx, "/RBAC.RBAC/cheak_role_path", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACClient) Cache(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/RBAC.RBAC/Cache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RBACServer is the server API for RBAC service.
// All implementations must embed UnimplementedRBACServer
// for forward compatibility
type RBACServer interface {
	GetRole(context.Context, *Uids) (*Roles, error)
	GetPaths(context.Context, *Path) (*Paths, error)
	AddRole(context.Context, *Roles) (*Empty, error)
	RefreshPaths(context.Context, *Paths) (*Empty, error)
	RefreshUserRole(context.Context, *UsersRoles) (*Empty, error)
	CheakRolePath(context.Context, *RolesPaths) (*Bools, error)
	Cache(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedRBACServer()
}

// UnimplementedRBACServer must be embedded to have forward compatible implementations.
type UnimplementedRBACServer struct {
}

func (UnimplementedRBACServer) GetRole(context.Context, *Uids) (*Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedRBACServer) GetPaths(context.Context, *Path) (*Paths, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaths not implemented")
}
func (UnimplementedRBACServer) AddRole(context.Context, *Roles) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedRBACServer) RefreshPaths(context.Context, *Paths) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshPaths not implemented")
}
func (UnimplementedRBACServer) RefreshUserRole(context.Context, *UsersRoles) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshUserRole not implemented")
}
func (UnimplementedRBACServer) CheakRolePath(context.Context, *RolesPaths) (*Bools, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheakRolePath not implemented")
}
func (UnimplementedRBACServer) Cache(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cache not implemented")
}
func (UnimplementedRBACServer) mustEmbedUnimplementedRBACServer() {}

// UnsafeRBACServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RBACServer will
// result in compilation errors.
type UnsafeRBACServer interface {
	mustEmbedUnimplementedRBACServer()
}

func RegisterRBACServer(s grpc.ServiceRegistrar, srv RBACServer) {
	s.RegisterService(&RBAC_ServiceDesc, srv)
}

func _RBAC_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RBAC.RBAC/get_role",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).GetRole(ctx, req.(*Uids))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_GetPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).GetPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RBAC.RBAC/get_paths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).GetPaths(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Roles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RBAC.RBAC/add_role",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).AddRole(ctx, req.(*Roles))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_RefreshPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paths)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).RefreshPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RBAC.RBAC/refresh_paths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).RefreshPaths(ctx, req.(*Paths))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_RefreshUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersRoles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).RefreshUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RBAC.RBAC/refresh_user_role",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).RefreshUserRole(ctx, req.(*UsersRoles))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_CheakRolePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesPaths)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).CheakRolePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RBAC.RBAC/cheak_role_path",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).CheakRolePath(ctx, req.(*RolesPaths))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBAC_Cache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServer).Cache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RBAC.RBAC/Cache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServer).Cache(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RBAC_ServiceDesc is the grpc.ServiceDesc for RBAC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RBAC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RBAC.RBAC",
	HandlerType: (*RBACServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_role",
			Handler:    _RBAC_GetRole_Handler,
		},
		{
			MethodName: "get_paths",
			Handler:    _RBAC_GetPaths_Handler,
		},
		{
			MethodName: "add_role",
			Handler:    _RBAC_AddRole_Handler,
		},
		{
			MethodName: "refresh_paths",
			Handler:    _RBAC_RefreshPaths_Handler,
		},
		{
			MethodName: "refresh_user_role",
			Handler:    _RBAC_RefreshUserRole_Handler,
		},
		{
			MethodName: "cheak_role_path",
			Handler:    _RBAC_CheakRolePath_Handler,
		},
		{
			MethodName: "Cache",
			Handler:    _RBAC_Cache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "RBAC.proto",
}

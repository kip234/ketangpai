// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package RankingList

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RankingListClient is the client API for RankingList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RankingListClient interface {
	Flushlist(ctx context.Context, in *RankingList.Flushin, opts ...grpc.CallOption) (*RankingList.Flushout, error)
	Getlistinfo(ctx context.Context, in *RankingList.Listname, opts ...grpc.CallOption) (*RankingList.Listinfo, error)
	Dellist(ctx context.Context, in *RankingList.Listname, opts ...grpc.CallOption) (*RankingList.Empty, error)
	Getranking(ctx context.Context, in *RankingList.Members, opts ...grpc.CallOption) (*RankingList.Rankings, error)
}

type rankingListClient struct {
	cc grpc.ClientConnInterface
}

func NewRankingListClient(cc grpc.ClientConnInterface) RankingListClient {
	return &rankingListClient{cc}
}

func (c *rankingListClient) Flushlist(ctx context.Context, in *RankingList.Flushin, opts ...grpc.CallOption) (*RankingList.Flushout, error) {
	out := new(RankingList.Flushout)
	err := c.cc.Invoke(ctx, "/RankingList.RankingList/flushlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingListClient) Getlistinfo(ctx context.Context, in *RankingList.Listname, opts ...grpc.CallOption) (*RankingList.Listinfo, error) {
	out := new(RankingList.Listinfo)
	err := c.cc.Invoke(ctx, "/RankingList.RankingList/getlistinfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingListClient) Dellist(ctx context.Context, in *RankingList.Listname, opts ...grpc.CallOption) (*RankingList.Empty, error) {
	out := new(RankingList.Empty)
	err := c.cc.Invoke(ctx, "/RankingList.RankingList/dellist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingListClient) Getranking(ctx context.Context, in *RankingList.Members, opts ...grpc.CallOption) (*RankingList.Rankings, error) {
	out := new(RankingList.Rankings)
	err := c.cc.Invoke(ctx, "/RankingList.RankingList/getranking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RankingListServer is the server API for RankingList service.
// All implementations must embed UnimplementedRankingListServer
// for forward compatibility
type RankingListServer interface {
	Flushlist(context.Context, *RankingList.Flushin) (*RankingList.Flushout, error)
	Getlistinfo(context.Context, *RankingList.Listname) (*RankingList.Listinfo, error)
	Dellist(context.Context, *RankingList.Listname) (*RankingList.Empty, error)
	Getranking(context.Context, *RankingList.Members) (*RankingList.Rankings, error)
	mustEmbedUnimplementedRankingListServer()
}

// UnimplementedRankingListServer must be embedded to have forward compatible implementations.
type UnimplementedRankingListServer struct {
}

func (UnimplementedRankingListServer) Flushlist(context.Context, *RankingList.Flushin) (*RankingList.Flushout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flushlist not implemented")
}
func (UnimplementedRankingListServer) Getlistinfo(context.Context, *RankingList.Listname) (*RankingList.Listinfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getlistinfo not implemented")
}
func (UnimplementedRankingListServer) Dellist(context.Context, *RankingList.Listname) (*RankingList.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dellist not implemented")
}
func (UnimplementedRankingListServer) Getranking(context.Context, *RankingList.Members) (*RankingList.Rankings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getranking not implemented")
}
func (UnimplementedRankingListServer) mustEmbedUnimplementedRankingListServer() {}

// UnsafeRankingListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RankingListServer will
// result in compilation errors.
type UnsafeRankingListServer interface {
	mustEmbedUnimplementedRankingListServer()
}

func RegisterRankingListServer(s grpc.ServiceRegistrar, srv RankingListServer) {
	s.RegisterService(&RankingList_ServiceDesc, srv)
}

func _RankingList_Flushlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankingList.Flushin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingListServer).Flushlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RankingList.RankingList/flushlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingListServer).Flushlist(ctx, req.(*RankingList.Flushin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingList_Getlistinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankingList.Listname)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingListServer).Getlistinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RankingList.RankingList/getlistinfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingListServer).Getlistinfo(ctx, req.(*RankingList.Listname))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingList_Dellist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankingList.Listname)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingListServer).Dellist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RankingList.RankingList/dellist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingListServer).Dellist(ctx, req.(*RankingList.Listname))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingList_Getranking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankingList.Members)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingListServer).Getranking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RankingList.RankingList/getranking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingListServer).Getranking(ctx, req.(*RankingList.Members))
	}
	return interceptor(ctx, in, info, handler)
}

// RankingList_ServiceDesc is the grpc.ServiceDesc for RankingList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RankingList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RankingList.RankingList",
	HandlerType: (*RankingListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "flushlist",
			Handler:    _RankingList_Flushlist_Handler,
		},
		{
			MethodName: "getlistinfo",
			Handler:    _RankingList_Getlistinfo_Handler,
		},
		{
			MethodName: "dellist",
			Handler:    _RankingList_Dellist_Handler,
		},
		{
			MethodName: "getranking",
			Handler:    _RankingList_Getranking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "RankingList.proto",
}
